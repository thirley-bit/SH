{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst plugin = function (babel) {\n    const t = babel.types;\n    // 这些变量需要在每个 program 里重置\n    const invokedApis = new Map();\n    let taroName;\n    let needDefault;\n    let referTaro;\n    return {\n        name: 'babel-plugin-transform-taro-api',\n        visitor: {\n            ImportDeclaration(ast, state) {\n                const packageName = state.opts.packageName;\n                const apis = state.opts.apis;\n                if (ast.node.source.value !== packageName)\n                    return;\n                ast.node.specifiers.forEach(node => {\n                    if (t.isImportDefaultSpecifier(node)) {\n                        needDefault = true;\n                        taroName = node.local.name;\n                    }\n                    else if (t.isImportSpecifier(node)) {\n                        const propertyName = node.imported.name;\n                        if (apis.has(propertyName)) { // 记录api名字\n                            ast.scope.rename(node.local.name);\n                            invokedApis.set(propertyName, node.local.name);\n                        }\n                        else { // 如果是未实现的api 改成Taro.xxx\n                            needDefault = true;\n                            const localName = node.local.name;\n                            const binding = ast.scope.getBinding(localName);\n                            const idn = t.identifier(taroName);\n                            referTaro.push(idn);\n                            binding && binding.referencePaths.forEach(reference => {\n                                reference.replaceWith(t.memberExpression(idn, t.identifier(propertyName)));\n                            });\n                        }\n                    }\n                });\n            },\n            MemberExpression(ast, state) {\n                /* 处理Taro.xxx */\n                const apis = state.opts.apis;\n                const isTaro = t.isIdentifier(ast.node.object, { name: taroName });\n                const property = ast.node.property;\n                let propertyName = null;\n                let propName = 'name';\n                if (!isTaro)\n                    return;\n                // 兼容一下 Taro['xxx']\n                if (t.isStringLiteral(property)) {\n                    propName = 'value';\n                }\n                propertyName = property[propName];\n                if (!propertyName)\n                    return;\n                // 同一api使用多次, 读取变量名\n                if (apis.has(propertyName)) {\n                    const parentNode = ast.parent;\n                    const isAssignment = t.isAssignmentExpression(parentNode) && parentNode.left === ast.node;\n                    if (!isAssignment) {\n                        let identifier;\n                        if (invokedApis.has(propertyName)) {\n                            identifier = t.identifier(invokedApis.get(propertyName));\n                        }\n                        else {\n                            const newPropertyName = ast.scope.generateUid(propertyName);\n                            invokedApis.set(propertyName, newPropertyName);\n                            /* 未绑定作用域 */\n                            identifier = t.identifier(newPropertyName);\n                        }\n                        ast.replaceWith(identifier);\n                    }\n                }\n                else {\n                    needDefault = true;\n                }\n            },\n            Program: {\n                enter(ast) {\n                    needDefault = false;\n                    referTaro = [];\n                    invokedApis.clear();\n                    taroName = ast.scope.getBinding('Taro')\n                        ? ast.scope.generateUid('Taro')\n                        : 'Taro';\n                },\n                exit(ast, state) {\n                    // 防止重复引入\n                    let isTaroApiImported = false;\n                    referTaro.forEach(node => {\n                        node.name = taroName;\n                    });\n                    ast.traverse({\n                        ImportDeclaration(ast) {\n                            const packageName = state.opts.packageName;\n                            const isImportingTaroApi = ast.node.source.value === packageName;\n                            if (!isImportingTaroApi)\n                                return;\n                            if (isTaroApiImported)\n                                return ast.remove();\n                            isTaroApiImported = true;\n                            const namedImports = Array.from(invokedApis.entries()).map(([imported, local]) => t.importSpecifier(t.identifier(local), t.identifier(imported)));\n                            if (needDefault) {\n                                const defaultImport = t.importDefaultSpecifier(t.identifier(taroName));\n                                ast.node.specifiers = [\n                                    defaultImport,\n                                    ...namedImports\n                                ];\n                                needDefault = false;\n                            }\n                            else {\n                                ast.node.specifiers = namedImports;\n                            }\n                        }\n                    });\n                }\n            }\n        }\n    };\n};\nexports.default = plugin;\n"]}