{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar helperPluginUtils = require('@babel/helper-plugin-utils');\nvar syntaxObjectRestSpread = require('@babel/plugin-syntax-object-rest-spread');\nvar core = require('@babel/core');\nvar pluginTransformParameters = require('@babel/plugin-transform-parameters');\nvar helperCompilationTargets = require('@babel/helper-compilation-targets');\nvar compatData = require('@babel/compat-data/corejs2-built-ins');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar compatData__default = /*#__PURE__*/_interopDefaultLegacy(compatData);\n\nconst {\n  isObjectProperty: isObjectProperty$1,\n  isArrayPattern,\n  isObjectPattern,\n  isAssignmentPattern: isAssignmentPattern$1,\n  isRestElement,\n  isIdentifier\n} = core.types;\nfunction shouldStoreRHSInTemporaryVariable(node) {\n  if (isArrayPattern(node)) {\n    const nonNullElements = node.elements.filter(element => element !== null);\n    if (nonNullElements.length > 1) return true;else return shouldStoreRHSInTemporaryVariable(nonNullElements[0]);\n  } else if (isObjectPattern(node)) {\n    const {\n      properties\n    } = node;\n    if (properties.length > 1) return true;else if (properties.length === 0) return false;else {\n      const firstProperty = properties[0];\n      if (isObjectProperty$1(firstProperty)) {\n        return shouldStoreRHSInTemporaryVariable(firstProperty.value);\n      } else {\n        return shouldStoreRHSInTemporaryVariable(firstProperty);\n      }\n    }\n  } else if (isAssignmentPattern$1(node)) {\n    return shouldStoreRHSInTemporaryVariable(node.left);\n  } else if (isRestElement(node)) {\n    if (isIdentifier(node.argument)) return true;\n    return shouldStoreRHSInTemporaryVariable(node.argument);\n  } else {\n    return false;\n  }\n}\n\nconst {\n  isAssignmentPattern,\n  isObjectProperty\n} = core.types;\n{\n  const node = core.types.identifier(\"a\");\n  const property = core.types.objectProperty(core.types.identifier(\"key\"), node);\n  const pattern = core.types.objectPattern([property]);\n\n  var ZERO_REFS = core.types.isReferenced(node, property, pattern) ? 1 : 0;\n}\nvar index = helperPluginUtils.declare((api, opts) => {\n  var _api$assumption, _api$assumption2, _api$assumption3, _api$assumption4;\n  api.assertVersion(7);\n  const targets = api.targets();\n  const supportsObjectAssign = !helperCompilationTargets.isRequired(\"es6.object.assign\", targets, {\n    compatData: compatData__default[\"default\"]\n  });\n  const {\n    useBuiltIns = supportsObjectAssign,\n    loose = false\n  } = opts;\n  if (typeof loose !== \"boolean\") {\n    throw new Error(\".loose must be a boolean, or undefined\");\n  }\n  const ignoreFunctionLength = (_api$assumption = api.assumption(\"ignoreFunctionLength\")) != null ? _api$assumption : loose;\n  const objectRestNoSymbols = (_api$assumption2 = api.assumption(\"objectRestNoSymbols\")) != null ? _api$assumption2 : loose;\n  const pureGetters = (_api$assumption3 = api.assumption(\"pureGetters\")) != null ? _api$assumption3 : loose;\n  const setSpreadProperties = (_api$assumption4 = api.assumption(\"setSpreadProperties\")) != null ? _api$assumption4 : loose;\n  function getExtendsHelper(file) {\n    return useBuiltIns ? core.types.memberExpression(core.types.identifier(\"Object\"), core.types.identifier(\"assign\")) : file.addHelper(\"extends\");\n  }\n  function hasRestElement(path) {\n    let foundRestElement = false;\n    visitRestElements(path, restElement => {\n      foundRestElement = true;\n      restElement.stop();\n    });\n    return foundRestElement;\n  }\n  function hasObjectPatternRestElement(path) {\n    let foundRestElement = false;\n    visitRestElements(path, restElement => {\n      if (restElement.parentPath.isObjectPattern()) {\n        foundRestElement = true;\n        restElement.stop();\n      }\n    });\n    return foundRestElement;\n  }\n  function visitRestElements(path, visitor) {\n    path.traverse({\n      Expression(path) {\n        const {\n          parent,\n          key\n        } = path;\n        if (isAssignmentPattern(parent) && key === \"right\" || isObjectProperty(parent) && parent.computed && key === \"key\") {\n          path.skip();\n        }\n      },\n      RestElement: visitor\n    });\n  }\n  function hasSpread(node) {\n    for (const prop of node.properties) {\n      if (core.types.isSpreadElement(prop)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  function extractNormalizedKeys(node) {\n    const props = node.properties;\n    const keys = [];\n    let allLiteral = true;\n    let hasTemplateLiteral = false;\n    for (const prop of props) {\n      if (core.types.isIdentifier(prop.key) && !prop.computed) {\n        keys.push(core.types.stringLiteral(prop.key.name));\n      } else if (core.types.isTemplateLiteral(prop.key)) {\n        keys.push(core.types.cloneNode(prop.key));\n        hasTemplateLiteral = true;\n      } else if (core.types.isLiteral(prop.key)) {\n        keys.push(core.types.stringLiteral(String(\n        prop.key.value)));\n      } else {\n        keys.push(core.types.cloneNode(prop.key));\n        allLiteral = false;\n      }\n    }\n    return {\n      keys,\n      allLiteral,\n      hasTemplateLiteral\n    };\n  }\n\n  function replaceImpureComputedKeys(properties, scope) {\n    const impureComputedPropertyDeclarators = [];\n    for (const propPath of properties) {\n      const key = propPath.get(\"key\");\n      if (propPath.node.computed && !key.isPure()) {\n        const name = scope.generateUidBasedOnNode(key.node);\n        const declarator = core.types.variableDeclarator(core.types.identifier(name), key.node);\n        impureComputedPropertyDeclarators.push(declarator);\n        key.replaceWith(core.types.identifier(name));\n      }\n    }\n    return impureComputedPropertyDeclarators;\n  }\n  function removeUnusedExcludedKeys(path) {\n    const bindings = path.getOuterBindingIdentifierPaths();\n    Object.keys(bindings).forEach(bindingName => {\n      const bindingParentPath = bindings[bindingName].parentPath;\n      if (path.scope.getBinding(bindingName).references > ZERO_REFS || !bindingParentPath.isObjectProperty()) {\n        return;\n      }\n      bindingParentPath.remove();\n    });\n  }\n\n  function createObjectRest(path, file, objRef) {\n    const props = path.get(\"properties\");\n    const last = props[props.length - 1];\n    core.types.assertRestElement(last.node);\n    const restElement = core.types.cloneNode(last.node);\n    last.remove();\n    const impureComputedPropertyDeclarators = replaceImpureComputedKeys(path.get(\"properties\"), path.scope);\n    const {\n      keys,\n      allLiteral,\n      hasTemplateLiteral\n    } = extractNormalizedKeys(path.node);\n    if (keys.length === 0) {\n      return [impureComputedPropertyDeclarators, restElement.argument, core.types.callExpression(getExtendsHelper(file), [core.types.objectExpression([]), core.types.sequenceExpression([core.types.callExpression(file.addHelper(\"objectDestructuringEmpty\"), [core.types.cloneNode(objRef)]), core.types.cloneNode(objRef)])])];\n    }\n    let keyExpression;\n    if (!allLiteral) {\n      keyExpression = core.types.callExpression(core.types.memberExpression(core.types.arrayExpression(keys), core.types.identifier(\"map\")), [file.addHelper(\"toPropertyKey\")]);\n    } else {\n      keyExpression = core.types.arrayExpression(keys);\n      if (!hasTemplateLiteral && !core.types.isProgram(path.scope.block)) {\n        const program = path.findParent(path => path.isProgram());\n        const id = path.scope.generateUidIdentifier(\"excluded\");\n        program.scope.push({\n          id,\n          init: keyExpression,\n          kind: \"const\"\n        });\n        keyExpression = core.types.cloneNode(id);\n      }\n    }\n    return [impureComputedPropertyDeclarators, restElement.argument, core.types.callExpression(file.addHelper(`objectWithoutProperties${objectRestNoSymbols ? \"Loose\" : \"\"}`), [core.types.cloneNode(objRef), keyExpression])];\n  }\n  function replaceRestElement(parentPath, paramPath, container) {\n    if (paramPath.isAssignmentPattern()) {\n      replaceRestElement(parentPath, paramPath.get(\"left\"), container);\n      return;\n    }\n    if (paramPath.isArrayPattern() && hasRestElement(paramPath)) {\n      const elements = paramPath.get(\"elements\");\n      for (let i = 0; i < elements.length; i++) {\n        replaceRestElement(parentPath, elements[i], container);\n      }\n    }\n    if (paramPath.isObjectPattern() && hasRestElement(paramPath)) {\n      const uid = parentPath.scope.generateUidIdentifier(\"ref\");\n      const declar = core.types.variableDeclaration(\"let\", [core.types.variableDeclarator(paramPath.node, uid)]);\n      if (container) {\n        container.push(declar);\n      } else {\n        parentPath.ensureBlock();\n        parentPath.get(\"body\").unshiftContainer(\"body\", declar);\n      }\n      paramPath.replaceWith(core.types.cloneNode(uid));\n    }\n  }\n  return {\n    name: \"proposal-object-rest-spread\",\n    inherits: syntaxObjectRestSpread.default,\n    visitor: {\n      Function(path) {\n        const params = path.get(\"params\");\n        const paramsWithRestElement = new Set();\n        const idsInRestParams = new Set();\n        for (let i = 0; i < params.length; ++i) {\n          const param = params[i];\n          if (hasRestElement(param)) {\n            paramsWithRestElement.add(i);\n            for (const name of Object.keys(param.getBindingIdentifiers())) {\n              idsInRestParams.add(name);\n            }\n          }\n        }\n\n        let idInRest = false;\n        const IdentifierHandler = function (path, functionScope) {\n          const name = path.node.name;\n          if (path.scope.getBinding(name) === functionScope.getBinding(name) && idsInRestParams.has(name)) {\n            idInRest = true;\n            path.stop();\n          }\n        };\n        let i;\n        for (i = 0; i < params.length && !idInRest; ++i) {\n          const param = params[i];\n          if (!paramsWithRestElement.has(i)) {\n            if (param.isReferencedIdentifier() || param.isBindingIdentifier()) {\n              IdentifierHandler(param, path.scope);\n            } else {\n              param.traverse({\n                \"Scope|TypeAnnotation|TSTypeAnnotation\": path => path.skip(),\n                \"ReferencedIdentifier|BindingIdentifier\": IdentifierHandler\n              }, path.scope);\n            }\n          }\n        }\n        if (!idInRest) {\n          for (let i = 0; i < params.length; ++i) {\n            const param = params[i];\n            if (paramsWithRestElement.has(i)) {\n              replaceRestElement(path, param);\n            }\n          }\n        } else {\n          const shouldTransformParam = idx => idx >= i - 1 || paramsWithRestElement.has(idx);\n          pluginTransformParameters.convertFunctionParams(path, ignoreFunctionLength, shouldTransformParam, replaceRestElement);\n        }\n      },\n      VariableDeclarator(path, file) {\n        if (!path.get(\"id\").isObjectPattern()) {\n          return;\n        }\n        let insertionPath = path;\n        const originalPath = path;\n        visitRestElements(path.get(\"id\"), path => {\n          if (!path.parentPath.isObjectPattern()) {\n            return;\n          }\n          if (\n          shouldStoreRHSInTemporaryVariable(originalPath.node.id) && !core.types.isIdentifier(originalPath.node.init)) {\n            const initRef = path.scope.generateUidIdentifierBasedOnNode(originalPath.node.init, \"ref\");\n            originalPath.insertBefore(core.types.variableDeclarator(initRef, originalPath.node.init));\n            originalPath.replaceWith(core.types.variableDeclarator(originalPath.node.id, core.types.cloneNode(initRef)));\n            return;\n          }\n          let ref = originalPath.node.init;\n          const refPropertyPath = [];\n          let kind;\n          path.findParent(path => {\n            if (path.isObjectProperty()) {\n              refPropertyPath.unshift(path);\n            } else if (path.isVariableDeclarator()) {\n              kind = path.parentPath.node.kind;\n              return true;\n            }\n          });\n          const impureObjRefComputedDeclarators = replaceImpureComputedKeys(refPropertyPath, path.scope);\n          refPropertyPath.forEach(prop => {\n            const {\n              node\n            } = prop;\n            ref = core.types.memberExpression(ref, core.types.cloneNode(node.key), node.computed || core.types.isLiteral(node.key));\n          });\n\n          const objectPatternPath = path.findParent(path => path.isObjectPattern());\n          const [impureComputedPropertyDeclarators, argument, callExpression] = createObjectRest(objectPatternPath, file, ref);\n          if (pureGetters) {\n            removeUnusedExcludedKeys(objectPatternPath);\n          }\n          core.types.assertIdentifier(argument);\n          insertionPath.insertBefore(impureComputedPropertyDeclarators);\n          insertionPath.insertBefore(impureObjRefComputedDeclarators);\n          insertionPath = insertionPath.insertAfter(core.types.variableDeclarator(argument, callExpression))[0];\n          path.scope.registerBinding(kind, insertionPath);\n          if (objectPatternPath.node.properties.length === 0) {\n            objectPatternPath.findParent(path => path.isObjectProperty() || path.isVariableDeclarator()).remove();\n          }\n        });\n      },\n      ExportNamedDeclaration(path) {\n        const declaration = path.get(\"declaration\");\n        if (!declaration.isVariableDeclaration()) return;\n        const hasRest = declaration.get(\"declarations\").some(path => hasObjectPatternRestElement(path.get(\"id\")));\n        if (!hasRest) return;\n        const specifiers = [];\n        for (const name of Object.keys(path.getOuterBindingIdentifiers(true))) {\n          specifiers.push(core.types.exportSpecifier(core.types.identifier(name), core.types.identifier(name)));\n        }\n\n        path.replaceWith(declaration.node);\n        path.insertAfter(core.types.exportNamedDeclaration(null, specifiers));\n      },\n      CatchClause(path) {\n        const paramPath = path.get(\"param\");\n        replaceRestElement(path, paramPath);\n      },\n      AssignmentExpression(path, file) {\n        const leftPath = path.get(\"left\");\n        if (leftPath.isObjectPattern() && hasRestElement(leftPath)) {\n          const nodes = [];\n          const refName = path.scope.generateUidBasedOnNode(path.node.right, \"ref\");\n          nodes.push(core.types.variableDeclaration(\"var\", [core.types.variableDeclarator(core.types.identifier(refName), path.node.right)]));\n          const [impureComputedPropertyDeclarators, argument, callExpression] = createObjectRest(leftPath, file, core.types.identifier(refName));\n          if (impureComputedPropertyDeclarators.length > 0) {\n            nodes.push(core.types.variableDeclaration(\"var\", impureComputedPropertyDeclarators));\n          }\n          const nodeWithoutSpread = core.types.cloneNode(path.node);\n          nodeWithoutSpread.right = core.types.identifier(refName);\n          nodes.push(core.types.expressionStatement(nodeWithoutSpread));\n          nodes.push(core.types.expressionStatement(core.types.assignmentExpression(\"=\", argument, callExpression)));\n          nodes.push(core.types.expressionStatement(core.types.identifier(refName)));\n          path.replaceWithMultiple(nodes);\n        }\n      },\n      ForXStatement(path) {\n        const {\n          node,\n          scope\n        } = path;\n        const leftPath = path.get(\"left\");\n        const left = node.left;\n        if (!hasObjectPatternRestElement(leftPath)) {\n          return;\n        }\n        if (!core.types.isVariableDeclaration(left)) {\n          const temp = scope.generateUidIdentifier(\"ref\");\n          node.left = core.types.variableDeclaration(\"var\", [core.types.variableDeclarator(temp)]);\n          path.ensureBlock();\n          const body = path.node.body;\n          if (body.body.length === 0 && path.isCompletionRecord()) {\n            body.body.unshift(core.types.expressionStatement(scope.buildUndefinedNode()));\n          }\n          body.body.unshift(core.types.expressionStatement(core.types.assignmentExpression(\"=\", left, core.types.cloneNode(temp))));\n        } else {\n          const pattern = left.declarations[0].id;\n          const key = scope.generateUidIdentifier(\"ref\");\n          node.left = core.types.variableDeclaration(left.kind, [core.types.variableDeclarator(key, null)]);\n          path.ensureBlock();\n          const body = node.body;\n          body.body.unshift(core.types.variableDeclaration(node.left.kind, [core.types.variableDeclarator(pattern, core.types.cloneNode(key))]));\n        }\n      },\n      ArrayPattern(path) {\n        const objectPatterns = [];\n        visitRestElements(path, path => {\n          if (!path.parentPath.isObjectPattern()) {\n            return;\n          }\n          const objectPattern = path.parentPath;\n          const uid = path.scope.generateUidIdentifier(\"ref\");\n          objectPatterns.push(core.types.variableDeclarator(objectPattern.node, uid));\n          objectPattern.replaceWith(core.types.cloneNode(uid));\n          path.skip();\n        });\n        if (objectPatterns.length > 0) {\n          const statementPath = path.getStatementParent();\n          const statementNode = statementPath.node;\n          const kind = statementNode.type === \"VariableDeclaration\" ? statementNode.kind : \"var\";\n          statementPath.insertAfter(core.types.variableDeclaration(kind, objectPatterns));\n        }\n      },\n      ObjectExpression(path, file) {\n        if (!hasSpread(path.node)) return;\n        let helper;\n        if (setSpreadProperties) {\n          helper = getExtendsHelper(file);\n        } else {\n          try {\n            helper = file.addHelper(\"objectSpread2\");\n          } catch (_unused) {\n            this.file.declarations[\"objectSpread2\"] = null;\n\n            helper = file.addHelper(\"objectSpread\");\n          }\n        }\n        let exp = null;\n        let props = [];\n        function make() {\n          const hadProps = props.length > 0;\n          const obj = core.types.objectExpression(props);\n          props = [];\n          if (!exp) {\n            exp = core.types.callExpression(helper, [obj]);\n            return;\n          }\n\n          if (pureGetters) {\n            if (hadProps) {\n              exp.arguments.push(obj);\n            }\n            return;\n          }\n          exp = core.types.callExpression(core.types.cloneNode(helper), [exp,\n          ...(hadProps ? [core.types.objectExpression([]), obj] : [])]);\n        }\n        for (const prop of path.node.properties) {\n          if (core.types.isSpreadElement(prop)) {\n            make();\n            exp.arguments.push(prop.argument);\n          } else {\n            props.push(prop);\n          }\n        }\n        if (props.length) make();\n        path.replaceWith(exp);\n      }\n    }\n  };\n});\n\nexports[\"default\"] = index;\n//# sourceMappingURL=index.js.map\n"]}