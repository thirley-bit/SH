{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar helperPluginUtils = require('@babel/helper-plugin-utils');\nvar transformTypeScript = require('@babel/plugin-transform-typescript');\nvar helperValidatorOption = require('@babel/helper-validator-option');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar transformTypeScript__default = /*#__PURE__*/_interopDefaultLegacy(transformTypeScript);\n\nconst v = new helperValidatorOption.OptionValidator(\"@babel/preset-typescript\");\nfunction normalizeOptions(options = {}) {\n  let {\n    allowNamespaces = true,\n    jsxPragma,\n    onlyRemoveTypeImports\n  } = options;\n  const TopLevelOptions = {\n    allExtensions: \"allExtensions\",\n    allowNamespaces: \"allowNamespaces\",\n    disallowAmbiguousJSXLike: \"disallowAmbiguousJSXLike\",\n    isTSX: \"isTSX\",\n    jsxPragma: \"jsxPragma\",\n    jsxPragmaFrag: \"jsxPragmaFrag\",\n    onlyRemoveTypeImports: \"onlyRemoveTypeImports\",\n    optimizeConstEnums: \"optimizeConstEnums\"\n  };\n  const jsxPragmaFrag = v.validateStringOption(TopLevelOptions.jsxPragmaFrag, options.jsxPragmaFrag, \"React.Fragment\");\n  const allExtensions = v.validateBooleanOption(TopLevelOptions.allExtensions, options.allExtensions, false);\n  const isTSX = v.validateBooleanOption(TopLevelOptions.isTSX, options.isTSX, false);\n  if (isTSX) {\n    v.invariant(allExtensions, \"isTSX:true requires allExtensions:true\");\n  }\n  const disallowAmbiguousJSXLike = v.validateBooleanOption(TopLevelOptions.disallowAmbiguousJSXLike, options.disallowAmbiguousJSXLike, false);\n  if (disallowAmbiguousJSXLike) {\n    v.invariant(allExtensions, \"disallowAmbiguousJSXLike:true requires allExtensions:true\");\n  }\n  const optimizeConstEnums = v.validateBooleanOption(TopLevelOptions.optimizeConstEnums, options.optimizeConstEnums, false);\n  return {\n    allExtensions,\n    allowNamespaces,\n    disallowAmbiguousJSXLike,\n    isTSX,\n    jsxPragma,\n    jsxPragmaFrag,\n    onlyRemoveTypeImports,\n    optimizeConstEnums\n  };\n}\n\nvar index = helperPluginUtils.declarePreset((api, opts) => {\n  api.assertVersion(7);\n  const {\n    allExtensions,\n    allowNamespaces,\n    disallowAmbiguousJSXLike,\n    isTSX,\n    jsxPragma,\n    jsxPragmaFrag,\n    onlyRemoveTypeImports,\n    optimizeConstEnums\n  } = normalizeOptions(opts);\n  const pluginOptions = (isTSX, disallowAmbiguousJSXLike) => ({\n    allowDeclareFields: opts.allowDeclareFields,\n    allowNamespaces,\n    disallowAmbiguousJSXLike,\n    isTSX,\n    jsxPragma,\n    jsxPragmaFrag,\n    onlyRemoveTypeImports,\n    optimizeConstEnums\n  });\n  return {\n    overrides: allExtensions ? [{\n      plugins: [[transformTypeScript__default[\"default\"], pluginOptions(isTSX, disallowAmbiguousJSXLike)]]\n    }] : [{\n      test: /\\.ts$/,\n      plugins: [[transformTypeScript__default[\"default\"], pluginOptions(false, false)]]\n    }, {\n      test: /\\.mts$/,\n      sourceType: \"module\",\n      plugins: [[transformTypeScript__default[\"default\"], pluginOptions(false, true)]]\n    }, {\n      test: /\\.cts$/,\n      sourceType: \"script\",\n      plugins: [[transformTypeScript__default[\"default\"], pluginOptions(false, true)]]\n    }, {\n      test: /\\.tsx$/,\n      plugins: [[transformTypeScript__default[\"default\"], pluginOptions(true, false)]]\n    }]\n  };\n});\n\nexports[\"default\"] = index;\n//# sourceMappingURL=index.js.map\n"]}