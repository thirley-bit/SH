{"version":3,"sources":["index.js","for-await.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _helperPluginUtils = require(\"@babel/helper-plugin-utils\");\nvar _helperRemapAsyncToGenerator = require(\"@babel/helper-remap-async-to-generator\");\nvar _pluginSyntaxAsyncGenerators = require(\"@babel/plugin-syntax-async-generators\");\nvar _core = require(\"@babel/core\");\nvar _forAwait = require(\"./for-await\");\nvar _helperEnvironmentVisitor = require(\"@babel/helper-environment-visitor\");\nvar _default = (0, _helperPluginUtils.declare)(api => {\n  api.assertVersion(7);\n  const yieldStarVisitor = _core.traverse.visitors.merge([{\n    ArrowFunctionExpression(path) {\n      path.skip();\n    },\n    YieldExpression({\n      node\n    }, state) {\n      if (!node.delegate) return;\n      const asyncIter = _core.types.callExpression(state.addHelper(\"asyncIterator\"), [node.argument]);\n      node.argument = _core.types.callExpression(state.addHelper(\"asyncGeneratorDelegate\"), [asyncIter, state.addHelper(\"awaitAsyncGenerator\")]);\n    }\n  }, _helperEnvironmentVisitor.default]);\n  const forAwaitVisitor = _core.traverse.visitors.merge([{\n    ArrowFunctionExpression(path) {\n      path.skip();\n    },\n    ForOfStatement(path, {\n      file\n    }) {\n      const {\n        node\n      } = path;\n      if (!node.await) return;\n      const build = (0, _forAwait.default)(path, {\n        getAsyncIterator: file.addHelper(\"asyncIterator\")\n      });\n      const {\n        declar,\n        loop\n      } = build;\n      const block = loop.body;\n\n      path.ensureBlock();\n\n      if (declar) {\n        block.body.push(declar);\n        if (path.node.body.body.length) {\n          block.body.push(_core.types.blockStatement(path.node.body.body));\n        }\n      } else {\n        block.body.push(...path.node.body.body);\n      }\n      _core.types.inherits(loop, node);\n      _core.types.inherits(loop.body, node.body);\n      const p = build.replaceParent ? path.parentPath : path;\n      p.replaceWithMultiple(build.node);\n\n      p.scope.parent.crawl();\n    }\n  }, _helperEnvironmentVisitor.default]);\n  const visitor = {\n    Function(path, state) {\n      if (!path.node.async) return;\n      path.traverse(forAwaitVisitor, state);\n      if (!path.node.generator) return;\n      path.traverse(yieldStarVisitor, state);\n\n      (0, _helperRemapAsyncToGenerator.default)(path, {\n        wrapAsync: state.addHelper(\"wrapAsyncGenerator\"),\n        wrapAwait: state.addHelper(\"awaitAsyncGenerator\")\n      });\n    }\n  };\n  return {\n    name: \"proposal-async-generator-functions\",\n    inherits: _pluginSyntaxAsyncGenerators.default,\n    visitor: {\n      Program(path, state) {\n        path.traverse(visitor, state);\n      }\n    }\n  };\n});\nexports.default = _default;\n\n//# sourceMappingURL=index.js.map\n","\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nvar _core = require(\"@babel/core\");\nconst buildForAwait = (0, _core.template)(`\n  async function wrapper() {\n    var ITERATOR_ABRUPT_COMPLETION = false;\n    var ITERATOR_HAD_ERROR_KEY = false;\n    var ITERATOR_ERROR_KEY;\n    try {\n      for (\n        var ITERATOR_KEY = GET_ITERATOR(OBJECT), STEP_KEY;\n        ITERATOR_ABRUPT_COMPLETION = !(STEP_KEY = await ITERATOR_KEY.next()).done;\n        ITERATOR_ABRUPT_COMPLETION = false\n      ) {\n      }\n    } catch (err) {\n      ITERATOR_HAD_ERROR_KEY = true;\n      ITERATOR_ERROR_KEY = err;\n    } finally {\n      try {\n        if (ITERATOR_ABRUPT_COMPLETION && ITERATOR_KEY.return != null) {\n          await ITERATOR_KEY.return();\n        }\n      } finally {\n        if (ITERATOR_HAD_ERROR_KEY) {\n          throw ITERATOR_ERROR_KEY;\n        }\n      }\n    }\n  }\n`);\nfunction _default(path, {\n  getAsyncIterator\n}) {\n  const {\n    node,\n    scope,\n    parent\n  } = path;\n  const stepKey = scope.generateUidIdentifier(\"step\");\n  const stepValue = _core.types.memberExpression(stepKey, _core.types.identifier(\"value\"));\n  const left = node.left;\n  let declar;\n  if (_core.types.isIdentifier(left) || _core.types.isPattern(left) || _core.types.isMemberExpression(left)) {\n    declar = _core.types.expressionStatement(_core.types.assignmentExpression(\"=\", left, stepValue));\n  } else if (_core.types.isVariableDeclaration(left)) {\n    declar = _core.types.variableDeclaration(left.kind, [_core.types.variableDeclarator(left.declarations[0].id, stepValue)]);\n  }\n  let template = buildForAwait({\n    ITERATOR_HAD_ERROR_KEY: scope.generateUidIdentifier(\"didIteratorError\"),\n    ITERATOR_ABRUPT_COMPLETION: scope.generateUidIdentifier(\"iteratorAbruptCompletion\"),\n    ITERATOR_ERROR_KEY: scope.generateUidIdentifier(\"iteratorError\"),\n    ITERATOR_KEY: scope.generateUidIdentifier(\"iterator\"),\n    GET_ITERATOR: getAsyncIterator,\n    OBJECT: node.right,\n    STEP_KEY: _core.types.cloneNode(stepKey)\n  });\n\n  template = template.body.body;\n  const isLabeledParent = _core.types.isLabeledStatement(parent);\n  const tryBody = template[3].block.body;\n  const loop = tryBody[0];\n  if (isLabeledParent) {\n    tryBody[0] = _core.types.labeledStatement(parent.label, loop);\n  }\n  return {\n    replaceParent: isLabeledParent,\n    node: template,\n    declar,\n    loop\n  };\n}\n\n//# sourceMappingURL=for-await.js.map\n"]}