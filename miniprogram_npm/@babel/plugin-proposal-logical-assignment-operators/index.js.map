{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _helperPluginUtils = require(\"@babel/helper-plugin-utils\");\nvar _pluginSyntaxLogicalAssignmentOperators = require(\"@babel/plugin-syntax-logical-assignment-operators\");\nvar _core = require(\"@babel/core\");\nvar _default = (0, _helperPluginUtils.declare)(api => {\n  api.assertVersion(7);\n  return {\n    name: \"proposal-logical-assignment-operators\",\n    inherits: _pluginSyntaxLogicalAssignmentOperators.default,\n    visitor: {\n      AssignmentExpression(path) {\n        const {\n          node,\n          scope\n        } = path;\n        const {\n          operator,\n          left,\n          right\n        } = node;\n        const operatorTrunc = operator.slice(0, -1);\n        if (!_core.types.LOGICAL_OPERATORS.includes(operatorTrunc)) {\n          return;\n        }\n        const lhs = _core.types.cloneNode(left);\n        if (_core.types.isMemberExpression(left)) {\n          const {\n            object,\n            property,\n            computed\n          } = left;\n          const memo = scope.maybeGenerateMemoised(object);\n          if (memo) {\n            left.object = memo;\n            lhs.object = _core.types.assignmentExpression(\"=\", _core.types.cloneNode(memo),\n            object);\n          }\n          if (computed) {\n            const memo = scope.maybeGenerateMemoised(property);\n            if (memo) {\n              left.property = memo;\n              lhs.property = _core.types.assignmentExpression(\"=\", _core.types.cloneNode(memo),\n              property);\n            }\n          }\n        }\n        path.replaceWith(_core.types.logicalExpression(\n        operatorTrunc, lhs, _core.types.assignmentExpression(\"=\", left, right)));\n      }\n    }\n  };\n});\nexports.default = _default;\n\n//# sourceMappingURL=index.js.map\n"]}