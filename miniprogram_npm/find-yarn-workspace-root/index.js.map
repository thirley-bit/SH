{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nconst fs = require('fs');\nconst micromatch = require('micromatch');\nconst path = require('path');\n\nmodule.exports = findWorkspaceRoot;\n\n/**\n * Adapted from:\n * https://github.com/yarnpkg/yarn/blob/ddf2f9ade211195372236c2f39a75b00fa18d4de/src/config.js#L612\n * @param {string} [initial]\n * @return {string|null}\n */\nfunction findWorkspaceRoot(initial) {\n  if (!initial) {\n    initial = process.cwd();\n  }\n  let previous = null;\n  let current = path.normalize(initial);\n\n  do {\n    const manifest = readPackageJSON(current);\n    const workspaces = extractWorkspaces(manifest);\n\n    if (workspaces) {\n      const relativePath = path.relative(current, initial);\n      if (relativePath === '' || micromatch([relativePath], workspaces).length > 0) {\n        return current;\n      } else {\n        return null;\n      }\n    }\n\n    previous = current;\n    current = path.dirname(current);\n  } while (current !== previous);\n\n  return null;\n}\n\nfunction extractWorkspaces(manifest) {\n  const workspaces = (manifest || {}).workspaces;\n  return (workspaces && workspaces.packages) || (Array.isArray(workspaces) ? workspaces : null);\n}\n\nfunction readPackageJSON(dir) {\n  const file = path.join(dir, 'package.json');\n  if (fs.existsSync(file)) {\n    return JSON.parse(fs.readFileSync(file, 'utf8'));\n  }\n  return null;\n}\n"]}