{"version":3,"sources":["index.js","Tapable.js","SyncBailHook.js","Hook.js","HookCodeFactory.js","SyncHook.js","SyncWaterfallHook.js","SyncLoopHook.js","AsyncParallelHook.js","AsyncParallelBailHook.js","AsyncSeriesHook.js","AsyncSeriesBailHook.js","AsyncSeriesWaterfallHook.js","HookMap.js","MultiHook.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AGRA,ADGA,ADGA,ADGA;AGRA,ADGA,ADGA,ADGA;AGRA,ADGA,ADGA,ADGA;AGRA,ACHA,AFMA,ADGA,ADGA;AGRA,ACHA,AFMA,ADGA,ADGA;AGRA,ACHA,AFMA,ADGA,ADGA;AGRA,ACHA,AFMA,AGTA,AJYA,ADGA;AGRA,ACHA,AFMA,AGTA,AJYA,ADGA;AGRA,ACHA,AFMA,AGTA,AJYA,ADGA;AGRA,ACHA,AFMA,AGTA,ACHA,ALeA,ADGA;AGRA,ACHA,AFMA,AGTA,ACHA,ALeA,ADGA;AGRA,ACHA,AFMA,AGTA,ACHA,ALeA;AELA,ACHA,AFMA,AGTA,AENA,ADGA,ALeA;AELA,ACHA,AFMA,AGTA,AENA,ADGA,ALeA;AELA,ACHA,AFMA,AGTA,AENA,ADGA,ALeA;AOpBA,ALeA,ACHA,AFMA,AGTA,AENA,ADGA,ALeA;AOpBA,ALeA,ACHA,AFMA,AGTA,AENA,ADGA,ALeA;AOpBA,ALeA,ACHA,AFMA,AGTA,AENA,ADGA,ALeA;AQvBA,ADGA,ALeA,ACHA,AFMA,AGTA,AENA,ADGA,ALeA;AQvBA,ADGA,ALeA,ACHA,AFMA,AGTA,AENA,ADGA,ALeA;AQvBA,ADGA,ALeA,ACHA,AFMA,AGTA,AENA,ADGA,ALeA;AQvBA,ADGA,AENA,APqBA,ACHA,AFMA,AGTA,AENA,ADGA,ALeA;AQvBA,ADGA,AENA,APqBA,ACHA,AFMA,AGTA,AENA,ADGA,ALeA;AQvBA,ADGA,AENA,APqBA,ACHA,AFMA,AGTA,AENA,ADGA,ALeA;AQvBA,ADGA,AGTA,ADGA,APqBA,ACHA,AFMA,AGTA,AENA,ADGA,ALeA;AQvBA,ADGA,AGTA,ADGA,APqBA,ACHA,AFMA,AGTA,AENA,ADGA,ALeA;AQvBA,ADGA,AGTA,ADGA,APqBA,ACHA,AFMA,AGTA,AENA,ADGA,ALeA;AQvBA,ADGA,AGTA,ADGA,AENA,AT2BA,ACHA,AFMA,AGTA,AENA,ADGA,ALeA;AQvBA,ADGA,AGTA,ADGA,AENA,AT2BA,ACHA,AFMA,AGTA,AENA,ADGA,ALeA;AQvBA,ADGA,AGTA,ADGA,AENA,AT2BA,ACHA,AFMA,AGTA,AENA,ADGA,ALeA;AQvBA,ADGA,AGTA,ADGA,AENA,AT2BA,ACHA,AS3BA,AXiCA,AGTA,AENA,ADGA,ALeA;AQvBA,ADGA,AGTA,ADGA,AENA,AT2BA,ACHA,AS3BA,AXiCA,AGTA,AENA,ADGA,ALeA;AQvBA,ADGA,AGTA,ADGA,AENA,AT2BA,ACHA,AS3BA,AXiCA,AGTA,AENA,ADGA,ALeA;AQvBA,ADGA,AGTA,ADGA,AENA,AT2BA,ACHA,AS3BA,ACHA,AZoCA,AGTA,AENA,ADGA,ALeA;AQvBA,ADGA,AGTA,ADGA,AENA,AT2BA,ACHA,AS3BA,ACHA,AZoCA,AGTA,AENA,ADGA,ALeA;AQvBA,ADGA,AGTA,ADGA,AENA,AT2BA,ACHA,AS3BA,ACHA,AZoCA,AGTA,AENA,ADGA,ALeA;AQvBA,ADGA,AGTA,ADGA,AENA,AT2BA,ACHA,AS3BA,ACHA,AZoCA,AGTA,AENA,ADGA,ALeA;AQvBA,ADGA,AGTA,ADGA,AENA,AT2BA,ACHA,AS3BA,ACHA,AZoCA,AGTA,AENA,ADGA,ALeA;AQvBA,ADGA,AGTA,ADGA,AENA,AT2BA,ACHA,AS3BA,ACHA,AZoCA,AGTA,AENA,ADGA,ALeA;AQvBA,ADGA,AGTA,ADGA,AENA,AT2BA,ACHA,AS3BA,ACHA,AZoCA,AGTA,AENA,ADGA,ALeA;AQvBA,ADGA,AGTA,ADGA,AENA,AT2BA,ACHA,AS3BA,ACHA,AT2BA,AENA,ADGA,ALeA;AQvBA,ADGA,AGTA,ADGA,AENA,AT2BA,ACHA,AS3BA,ACHA,AT2BA,AENA,ADGA,ALeA;AQvBA,ADGA,AGTA,ADGA,AENA,AT2BA,ACHA,AS3BA,ACHA,AT2BA,AENA,ADGA,ALeA;AQvBA,ADGA,AGTA,ADGA,AENA,AT2BA,ACHA,AS3BA,ACHA,AT2BA,AENA,ADGA,ALeA;AQvBA,ADGA,AGTA,ADGA,AENA,AT2BA,ACHA,AS3BA,ACHA,APqBA,ADGA,ALeA;AQvBA,ADGA,AGTA,ADGA,AENA,AT2BA,ACHA,AS3BA,ACHA,APqBA,ADGA,ALeA;AQvBA,ADGA,AGTA,ADGA,AENA,AT2BA,ACHA,AS3BA,ACHA,APqBA,ADGA,ALeA;AQvBA,ADGA,AGTA,ADGA,AENA,AT2BA,ACHA,AS3BA,ACHA,APqBA,ADGA,ALeA;AQvBA,AENA,ADGA,AENA,AT2BA,ACHA,AS3BA,ACHA,APqBA,ADGA,ALeA;AQvBA,AENA,ADGA,AENA,AT2BA,ACHA,AS3BA,ACHA,APqBA,ADGA,ALeA;AQvBA,AENA,ADGA,AENA,AT2BA,ACHA,AS3BA,ACHA,ARwBA,ALeA;AQvBA,AENA,ADGA,AENA,AT2BA,ACHA,AS3BA,ACHA,ARwBA,ALeA;AQvBA,AENA,ADGA,AENA,AT2BA,ACHA,AS3BA,ACHA,ARwBA,ALeA;AQvBA,AENA,ADGA,AENA,AT2BA,ACHA,AS3BA,ACHA,ARwBA,ALeA;AQvBA,AENA,ACHA,AT2BA,ACHA,AS3BA,ACHA,ARwBA,ALeA;AQvBA,AENA,ACHA,AT2BA,ACHA,AS3BA,ACHA,ARwBA,ALeA;AQvBA,AENA,ACHA,AT2BA,ACHA,AS3BA,ACHA,ARwBA,ALeA;AQvBA,AENA,ACHA,AT2BA,ACHA,AS3BA,ACHA,ARwBA,ALeA;AQvBA,AENA,ACHA,AT2BA,ACHA,AS3BA,ACHA,ARwBA,ALeA;AQvBA,AENA,ACHA,AT2BA,ACHA,AS3BA,ACHA,ARwBA,ALeA;AQvBA,AENA,ACHA,AT2BA,ACHA,AS3BA,ACHA,ARwBA,ALeA;AQvBA,AENA,ACHA,AT2BA,ACHA,AS3BA,ACHA,ARwBA,ALeA;AQvBA,AGTA,AT2BA,ACHA,AS3BA,ACHA,AbuCA;AQvBA,AGTA,AT2BA,ACHA,AS3BA,ACHA,AbuCA;AQvBA,AGTA,AT2BA,ACHA,AS3BA,ACHA,AbuCA;AQvBA,AGTA,AT2BA,ACHA,AS3BA,ACHA,AbuCA;AQvBA,AGTA,AT2BA,ACHA,AS3BA,ACHA,AbuCA;AQvBA,AGTA,AT2BA,ACHA,AS3BA,ACHA,AbuCA;AQvBA,AGTA,AT2BA,ACHA,AS3BA,ACHA,AbuCA;AQvBA,AGTA,AT2BA,ACHA,AS3BA,ACHA,AbuCA;AQvBA,AGTA,AT2BA,ACHA,AS3BA,ACHA,AbuCA;AQvBA,AGTA,AT2BA,ACHA,AS3BA,ACHA,AbuCA;AQvBA,AGTA,AT2BA,ACHA,AS3BA,ACHA,AbuCA;AQvBA,AGTA,AT2BA,ACHA,AS3BA,ACHA,AbuCA;AQvBA,ANkBA,ACHA,AS3BA,ACHA,AbuCA;AQvBA,ANkBA,ACHA,AS3BA,ACHA,AbuCA;AQvBA,ANkBA,ACHA,AS3BA,ACHA;ALgBA,ANkBA,ACHA,AS3BA,ACHA;ALgBA,ANkBA,ACHA,AS3BA,ACHA;ALgBA,ANkBA,ACHA,AS3BA,ACHA;ALgBA,ANkBA,ACHA,AS3BA,ACHA;ALgBA,ANkBA,ACHA,AS3BA,ACHA;ALgBA,ANkBA,ACHA,AS3BA,ACHA;ALgBA,ANkBA,ACHA,AS3BA,ACHA;ALgBA,ANkBA,ACHA,AS3BA;AJaA,ANkBA,ACHA,AS3BA;AJaA,ANkBA,ACHA,AS3BA;AJaA,ANkBA,ACHA;AKdA,ANkBA,ACHA;AKdA,ANkBA,ACHA;AKdA,ANkBA,ACHA;AKdA,ANkBA,ACHA;AKdA,ANkBA,ACHA;AKdA,ANkBA,ACHA;AKdA,ANkBA,ACHA;AKdA,ANkBA,ACHA;AKdA,ANkBA,ACHA;AKdA,ANkBA,ACHA;AKdA,ANkfile":"index.js","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\nexports.__esModule = true;\nexports.Tapable = require(\"./Tapable\");\nexports.SyncHook = require(\"./SyncHook\");\nexports.SyncBailHook = require(\"./SyncBailHook\");\nexports.SyncWaterfallHook = require(\"./SyncWaterfallHook\");\nexports.SyncLoopHook = require(\"./SyncLoopHook\");\nexports.AsyncParallelHook = require(\"./AsyncParallelHook\");\nexports.AsyncParallelBailHook = require(\"./AsyncParallelBailHook\");\nexports.AsyncSeriesHook = require(\"./AsyncSeriesHook\");\nexports.AsyncSeriesBailHook = require(\"./AsyncSeriesBailHook\");\nexports.AsyncSeriesWaterfallHook = require(\"./AsyncSeriesWaterfallHook\");\nexports.HookMap = require(\"./HookMap\");\nexports.MultiHook = require(\"./MultiHook\");\n","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\nconst util = require(\"util\");\nconst SyncBailHook = require(\"./SyncBailHook\");\n\nfunction Tapable() {\n\tthis._pluginCompat = new SyncBailHook([\"options\"]);\n\tthis._pluginCompat.tap(\n\t\t{\n\t\t\tname: \"Tapable camelCase\",\n\t\t\tstage: 100\n\t\t},\n\t\toptions => {\n\t\t\toptions.names.add(\n\t\t\t\toptions.name.replace(/[- ]([a-z])/g, (str, ch) => ch.toUpperCase())\n\t\t\t);\n\t\t}\n\t);\n\tthis._pluginCompat.tap(\n\t\t{\n\t\t\tname: \"Tapable this.hooks\",\n\t\t\tstage: 200\n\t\t},\n\t\toptions => {\n\t\t\tlet hook;\n\t\t\tfor (const name of options.names) {\n\t\t\t\thook = this.hooks[name];\n\t\t\t\tif (hook !== undefined) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (hook !== undefined) {\n\t\t\t\tconst tapOpt = {\n\t\t\t\t\tname: options.fn.name || \"unnamed compat plugin\",\n\t\t\t\t\tstage: options.stage || 0\n\t\t\t\t};\n\t\t\t\tif (options.async) hook.tapAsync(tapOpt, options.fn);\n\t\t\t\telse hook.tap(tapOpt, options.fn);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t);\n}\nmodule.exports = Tapable;\n\nTapable.addCompatLayer = function addCompatLayer(instance) {\n\tTapable.call(instance);\n\tinstance.plugin = Tapable.prototype.plugin;\n\tinstance.apply = Tapable.prototype.apply;\n};\n\nTapable.prototype.plugin = util.deprecate(function plugin(name, fn) {\n\tif (Array.isArray(name)) {\n\t\tname.forEach(function(name) {\n\t\t\tthis.plugin(name, fn);\n\t\t}, this);\n\t\treturn;\n\t}\n\tconst result = this._pluginCompat.call({\n\t\tname: name,\n\t\tfn: fn,\n\t\tnames: new Set([name])\n\t});\n\tif (!result) {\n\t\tthrow new Error(\n\t\t\t`Plugin could not be registered at '${name}'. Hook was not found.\\n` +\n\t\t\t\t\"BREAKING CHANGE: There need to exist a hook at 'this.hooks'. \" +\n\t\t\t\t\"To create a compatibility layer for this hook, hook into 'this._pluginCompat'.\"\n\t\t);\n\t}\n}, \"Tapable.plugin is deprecated. Use new API on `.hooks` instead\");\n\nTapable.prototype.apply = util.deprecate(function apply() {\n\tfor (var i = 0; i < arguments.length; i++) {\n\t\targuments[i].apply(this);\n\t}\n}, \"Tapable.apply is deprecated. Call apply on the plugin directly instead\");\n","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\nconst Hook = require(\"./Hook\");\nconst HookCodeFactory = require(\"./HookCodeFactory\");\n\nclass SyncBailHookCodeFactory extends HookCodeFactory {\n\tcontent({ onError, onResult, resultReturns, onDone, rethrowIfPossible }) {\n\t\treturn this.callTapsSeries({\n\t\t\tonError: (i, err) => onError(err),\n\t\t\tonResult: (i, result, next) =>\n\t\t\t\t`if(${result} !== undefined) {\\n${onResult(\n\t\t\t\t\tresult\n\t\t\t\t)};\\n} else {\\n${next()}}\\n`,\n\t\t\tresultReturns,\n\t\t\tonDone,\n\t\t\trethrowIfPossible\n\t\t});\n\t}\n}\n\nconst factory = new SyncBailHookCodeFactory();\n\nclass SyncBailHook extends Hook {\n\ttapAsync() {\n\t\tthrow new Error(\"tapAsync is not supported on a SyncBailHook\");\n\t}\n\n\ttapPromise() {\n\t\tthrow new Error(\"tapPromise is not supported on a SyncBailHook\");\n\t}\n\n\tcompile(options) {\n\t\tfactory.setup(this, options);\n\t\treturn factory.create(options);\n\t}\n}\n\nmodule.exports = SyncBailHook;\n","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\nclass Hook {\n\tconstructor(args) {\n\t\tif (!Array.isArray(args)) args = [];\n\t\tthis._args = args;\n\t\tthis.taps = [];\n\t\tthis.interceptors = [];\n\t\tthis.call = this._call;\n\t\tthis.promise = this._promise;\n\t\tthis.callAsync = this._callAsync;\n\t\tthis._x = undefined;\n\t}\n\n\tcompile(options) {\n\t\tthrow new Error(\"Abstract: should be overriden\");\n\t}\n\n\t_createCall(type) {\n\t\treturn this.compile({\n\t\t\ttaps: this.taps,\n\t\t\tinterceptors: this.interceptors,\n\t\t\targs: this._args,\n\t\t\ttype: type\n\t\t});\n\t}\n\n\ttap(options, fn) {\n\t\tif (typeof options === \"string\") options = { name: options };\n\t\tif (typeof options !== \"object\" || options === null)\n\t\t\tthrow new Error(\n\t\t\t\t\"Invalid arguments to tap(options: Object, fn: function)\"\n\t\t\t);\n\t\toptions = Object.assign({ type: \"sync\", fn: fn }, options);\n\t\tif (typeof options.name !== \"string\" || options.name === \"\")\n\t\t\tthrow new Error(\"Missing name for tap\");\n\t\toptions = this._runRegisterInterceptors(options);\n\t\tthis._insert(options);\n\t}\n\n\ttapAsync(options, fn) {\n\t\tif (typeof options === \"string\") options = { name: options };\n\t\tif (typeof options !== \"object\" || options === null)\n\t\t\tthrow new Error(\n\t\t\t\t\"Invalid arguments to tapAsync(options: Object, fn: function)\"\n\t\t\t);\n\t\toptions = Object.assign({ type: \"async\", fn: fn }, options);\n\t\tif (typeof options.name !== \"string\" || options.name === \"\")\n\t\t\tthrow new Error(\"Missing name for tapAsync\");\n\t\toptions = this._runRegisterInterceptors(options);\n\t\tthis._insert(options);\n\t}\n\n\ttapPromise(options, fn) {\n\t\tif (typeof options === \"string\") options = { name: options };\n\t\tif (typeof options !== \"object\" || options === null)\n\t\t\tthrow new Error(\n\t\t\t\t\"Invalid arguments to tapPromise(options: Object, fn: function)\"\n\t\t\t);\n\t\toptions = Object.assign({ type: \"promise\", fn: fn }, options);\n\t\tif (typeof options.name !== \"string\" || options.name === \"\")\n\t\t\tthrow new Error(\"Missing name for tapPromise\");\n\t\toptions = this._runRegisterInterceptors(options);\n\t\tthis._insert(options);\n\t}\n\n\t_runRegisterInterceptors(options) {\n\t\tfor (const interceptor of this.interceptors) {\n\t\t\tif (interceptor.register) {\n\t\t\t\tconst newOptions = interceptor.register(options);\n\t\t\t\tif (newOptions !== undefined) options = newOptions;\n\t\t\t}\n\t\t}\n\t\treturn options;\n\t}\n\n\twithOptions(options) {\n\t\tconst mergeOptions = opt =>\n\t\t\tObject.assign({}, options, typeof opt === \"string\" ? { name: opt } : opt);\n\n\t\t// Prevent creating endless prototype chains\n\t\toptions = Object.assign({}, options, this._withOptions);\n\t\tconst base = this._withOptionsBase || this;\n\t\tconst newHook = Object.create(base);\n\n\t\t(newHook.tapAsync = (opt, fn) => base.tapAsync(mergeOptions(opt), fn)),\n\t\t\t(newHook.tap = (opt, fn) => base.tap(mergeOptions(opt), fn));\n\t\tnewHook.tapPromise = (opt, fn) => base.tapPromise(mergeOptions(opt), fn);\n\t\tnewHook._withOptions = options;\n\t\tnewHook._withOptionsBase = base;\n\t\treturn newHook;\n\t}\n\n\tisUsed() {\n\t\treturn this.taps.length > 0 || this.interceptors.length > 0;\n\t}\n\n\tintercept(interceptor) {\n\t\tthis._resetCompilation();\n\t\tthis.interceptors.push(Object.assign({}, interceptor));\n\t\tif (interceptor.register) {\n\t\t\tfor (let i = 0; i < this.taps.length; i++)\n\t\t\t\tthis.taps[i] = interceptor.register(this.taps[i]);\n\t\t}\n\t}\n\n\t_resetCompilation() {\n\t\tthis.call = this._call;\n\t\tthis.callAsync = this._callAsync;\n\t\tthis.promise = this._promise;\n\t}\n\n\t_insert(item) {\n\t\tthis._resetCompilation();\n\t\tlet before;\n\t\tif (typeof item.before === \"string\") before = new Set([item.before]);\n\t\telse if (Array.isArray(item.before)) {\n\t\t\tbefore = new Set(item.before);\n\t\t}\n\t\tlet stage = 0;\n\t\tif (typeof item.stage === \"number\") stage = item.stage;\n\t\tlet i = this.taps.length;\n\t\twhile (i > 0) {\n\t\t\ti--;\n\t\t\tconst x = this.taps[i];\n\t\t\tthis.taps[i + 1] = x;\n\t\t\tconst xStage = x.stage || 0;\n\t\t\tif (before) {\n\t\t\t\tif (before.has(x.name)) {\n\t\t\t\t\tbefore.delete(x.name);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (before.size > 0) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (xStage > stage) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\ti++;\n\t\t\tbreak;\n\t\t}\n\t\tthis.taps[i] = item;\n\t}\n}\n\nfunction createCompileDelegate(name, type) {\n\treturn function lazyCompileHook(...args) {\n\t\tthis[name] = this._createCall(type);\n\t\treturn this[name](...args);\n\t};\n}\n\nObject.defineProperties(Hook.prototype, {\n\t_call: {\n\t\tvalue: createCompileDelegate(\"call\", \"sync\"),\n\t\tconfigurable: true,\n\t\twritable: true\n\t},\n\t_promise: {\n\t\tvalue: createCompileDelegate(\"promise\", \"promise\"),\n\t\tconfigurable: true,\n\t\twritable: true\n\t},\n\t_callAsync: {\n\t\tvalue: createCompileDelegate(\"callAsync\", \"async\"),\n\t\tconfigurable: true,\n\t\twritable: true\n\t}\n});\n\nmodule.exports = Hook;\n","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\nclass HookCodeFactory {\n\tconstructor(config) {\n\t\tthis.config = config;\n\t\tthis.options = undefined;\n\t\tthis._args = undefined;\n\t}\n\n\tcreate(options) {\n\t\tthis.init(options);\n\t\tlet fn;\n\t\tswitch (this.options.type) {\n\t\t\tcase \"sync\":\n\t\t\t\tfn = new Function(\n\t\t\t\t\tthis.args(),\n\t\t\t\t\t'\"use strict\";\\n' +\n\t\t\t\t\t\tthis.header() +\n\t\t\t\t\t\tthis.content({\n\t\t\t\t\t\t\tonError: err => `throw ${err};\\n`,\n\t\t\t\t\t\t\tonResult: result => `return ${result};\\n`,\n\t\t\t\t\t\t\tresultReturns: true,\n\t\t\t\t\t\t\tonDone: () => \"\",\n\t\t\t\t\t\t\trethrowIfPossible: true\n\t\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase \"async\":\n\t\t\t\tfn = new Function(\n\t\t\t\t\tthis.args({\n\t\t\t\t\t\tafter: \"_callback\"\n\t\t\t\t\t}),\n\t\t\t\t\t'\"use strict\";\\n' +\n\t\t\t\t\t\tthis.header() +\n\t\t\t\t\t\tthis.content({\n\t\t\t\t\t\t\tonError: err => `_callback(${err});\\n`,\n\t\t\t\t\t\t\tonResult: result => `_callback(null, ${result});\\n`,\n\t\t\t\t\t\t\tonDone: () => \"_callback();\\n\"\n\t\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase \"promise\":\n\t\t\t\tlet errorHelperUsed = false;\n\t\t\t\tconst content = this.content({\n\t\t\t\t\tonError: err => {\n\t\t\t\t\t\terrorHelperUsed = true;\n\t\t\t\t\t\treturn `_error(${err});\\n`;\n\t\t\t\t\t},\n\t\t\t\t\tonResult: result => `_resolve(${result});\\n`,\n\t\t\t\t\tonDone: () => \"_resolve();\\n\"\n\t\t\t\t});\n\t\t\t\tlet code = \"\";\n\t\t\t\tcode += '\"use strict\";\\n';\n\t\t\t\tcode += \"return new Promise((_resolve, _reject) => {\\n\";\n\t\t\t\tif (errorHelperUsed) {\n\t\t\t\t\tcode += \"var _sync = true;\\n\";\n\t\t\t\t\tcode += \"function _error(_err) {\\n\";\n\t\t\t\t\tcode += \"if(_sync)\\n\";\n\t\t\t\t\tcode += \"_resolve(Promise.resolve().then(() => { throw _err; }));\\n\";\n\t\t\t\t\tcode += \"else\\n\";\n\t\t\t\t\tcode += \"_reject(_err);\\n\";\n\t\t\t\t\tcode += \"};\\n\";\n\t\t\t\t}\n\t\t\t\tcode += this.header();\n\t\t\t\tcode += content;\n\t\t\t\tif (errorHelperUsed) {\n\t\t\t\t\tcode += \"_sync = false;\\n\";\n\t\t\t\t}\n\t\t\t\tcode += \"});\\n\";\n\t\t\t\tfn = new Function(this.args(), code);\n\t\t\t\tbreak;\n\t\t}\n\t\tthis.deinit();\n\t\treturn fn;\n\t}\n\n\tsetup(instance, options) {\n\t\tinstance._x = options.taps.map(t => t.fn);\n\t}\n\n\t/**\n\t * @param {{ type: \"sync\" | \"promise\" | \"async\", taps: Array<Tap>, interceptors: Array<Interceptor> }} options\n\t */\n\tinit(options) {\n\t\tthis.options = options;\n\t\tthis._args = options.args.slice();\n\t}\n\n\tdeinit() {\n\t\tthis.options = undefined;\n\t\tthis._args = undefined;\n\t}\n\n\theader() {\n\t\tlet code = \"\";\n\t\tif (this.needContext()) {\n\t\t\tcode += \"var _context = {};\\n\";\n\t\t} else {\n\t\t\tcode += \"var _context;\\n\";\n\t\t}\n\t\tcode += \"var _x = this._x;\\n\";\n\t\tif (this.options.interceptors.length > 0) {\n\t\t\tcode += \"var _taps = this.taps;\\n\";\n\t\t\tcode += \"var _interceptors = this.interceptors;\\n\";\n\t\t}\n\t\tfor (let i = 0; i < this.options.interceptors.length; i++) {\n\t\t\tconst interceptor = this.options.interceptors[i];\n\t\t\tif (interceptor.call) {\n\t\t\t\tcode += `${this.getInterceptor(i)}.call(${this.args({\n\t\t\t\t\tbefore: interceptor.context ? \"_context\" : undefined\n\t\t\t\t})});\\n`;\n\t\t\t}\n\t\t}\n\t\treturn code;\n\t}\n\n\tneedContext() {\n\t\tfor (const tap of this.options.taps) if (tap.context) return true;\n\t\treturn false;\n\t}\n\n\tcallTap(tapIndex, { onError, onResult, onDone, rethrowIfPossible }) {\n\t\tlet code = \"\";\n\t\tlet hasTapCached = false;\n\t\tfor (let i = 0; i < this.options.interceptors.length; i++) {\n\t\t\tconst interceptor = this.options.interceptors[i];\n\t\t\tif (interceptor.tap) {\n\t\t\t\tif (!hasTapCached) {\n\t\t\t\t\tcode += `var _tap${tapIndex} = ${this.getTap(tapIndex)};\\n`;\n\t\t\t\t\thasTapCached = true;\n\t\t\t\t}\n\t\t\t\tcode += `${this.getInterceptor(i)}.tap(${\n\t\t\t\t\tinterceptor.context ? \"_context, \" : \"\"\n\t\t\t\t}_tap${tapIndex});\\n`;\n\t\t\t}\n\t\t}\n\t\tcode += `var _fn${tapIndex} = ${this.getTapFn(tapIndex)};\\n`;\n\t\tconst tap = this.options.taps[tapIndex];\n\t\tswitch (tap.type) {\n\t\t\tcase \"sync\":\n\t\t\t\tif (!rethrowIfPossible) {\n\t\t\t\t\tcode += `var _hasError${tapIndex} = false;\\n`;\n\t\t\t\t\tcode += \"try {\\n\";\n\t\t\t\t}\n\t\t\t\tif (onResult) {\n\t\t\t\t\tcode += `var _result${tapIndex} = _fn${tapIndex}(${this.args({\n\t\t\t\t\t\tbefore: tap.context ? \"_context\" : undefined\n\t\t\t\t\t})});\\n`;\n\t\t\t\t} else {\n\t\t\t\t\tcode += `_fn${tapIndex}(${this.args({\n\t\t\t\t\t\tbefore: tap.context ? \"_context\" : undefined\n\t\t\t\t\t})});\\n`;\n\t\t\t\t}\n\t\t\t\tif (!rethrowIfPossible) {\n\t\t\t\t\tcode += \"} catch(_err) {\\n\";\n\t\t\t\t\tcode += `_hasError${tapIndex} = true;\\n`;\n\t\t\t\t\tcode += onError(\"_err\");\n\t\t\t\t\tcode += \"}\\n\";\n\t\t\t\t\tcode += `if(!_hasError${tapIndex}) {\\n`;\n\t\t\t\t}\n\t\t\t\tif (onResult) {\n\t\t\t\t\tcode += onResult(`_result${tapIndex}`);\n\t\t\t\t}\n\t\t\t\tif (onDone) {\n\t\t\t\t\tcode += onDone();\n\t\t\t\t}\n\t\t\t\tif (!rethrowIfPossible) {\n\t\t\t\t\tcode += \"}\\n\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"async\":\n\t\t\t\tlet cbCode = \"\";\n\t\t\t\tif (onResult) cbCode += `(_err${tapIndex}, _result${tapIndex}) => {\\n`;\n\t\t\t\telse cbCode += `_err${tapIndex} => {\\n`;\n\t\t\t\tcbCode += `if(_err${tapIndex}) {\\n`;\n\t\t\t\tcbCode += onError(`_err${tapIndex}`);\n\t\t\t\tcbCode += \"} else {\\n\";\n\t\t\t\tif (onResult) {\n\t\t\t\t\tcbCode += onResult(`_result${tapIndex}`);\n\t\t\t\t}\n\t\t\t\tif (onDone) {\n\t\t\t\t\tcbCode += onDone();\n\t\t\t\t}\n\t\t\t\tcbCode += \"}\\n\";\n\t\t\t\tcbCode += \"}\";\n\t\t\t\tcode += `_fn${tapIndex}(${this.args({\n\t\t\t\t\tbefore: tap.context ? \"_context\" : undefined,\n\t\t\t\t\tafter: cbCode\n\t\t\t\t})});\\n`;\n\t\t\t\tbreak;\n\t\t\tcase \"promise\":\n\t\t\t\tcode += `var _hasResult${tapIndex} = false;\\n`;\n\t\t\t\tcode += `var _promise${tapIndex} = _fn${tapIndex}(${this.args({\n\t\t\t\t\tbefore: tap.context ? \"_context\" : undefined\n\t\t\t\t})});\\n`;\n\t\t\t\tcode += `if (!_promise${tapIndex} || !_promise${tapIndex}.then)\\n`;\n\t\t\t\tcode += `  throw new Error('Tap function (tapPromise) did not return promise (returned ' + _promise${tapIndex} + ')');\\n`;\n\t\t\t\tcode += `_promise${tapIndex}.then(_result${tapIndex} => {\\n`;\n\t\t\t\tcode += `_hasResult${tapIndex} = true;\\n`;\n\t\t\t\tif (onResult) {\n\t\t\t\t\tcode += onResult(`_result${tapIndex}`);\n\t\t\t\t}\n\t\t\t\tif (onDone) {\n\t\t\t\t\tcode += onDone();\n\t\t\t\t}\n\t\t\t\tcode += `}, _err${tapIndex} => {\\n`;\n\t\t\t\tcode += `if(_hasResult${tapIndex}) throw _err${tapIndex};\\n`;\n\t\t\t\tcode += onError(`_err${tapIndex}`);\n\t\t\t\tcode += \"});\\n\";\n\t\t\t\tbreak;\n\t\t}\n\t\treturn code;\n\t}\n\n\tcallTapsSeries({\n\t\tonError,\n\t\tonResult,\n\t\tresultReturns,\n\t\tonDone,\n\t\tdoneReturns,\n\t\trethrowIfPossible\n\t}) {\n\t\tif (this.options.taps.length === 0) return onDone();\n\t\tconst firstAsync = this.options.taps.findIndex(t => t.type !== \"sync\");\n\t\tconst somethingReturns = resultReturns || doneReturns || false;\n\t\tlet code = \"\";\n\t\tlet current = onDone;\n\t\tfor (let j = this.options.taps.length - 1; j >= 0; j--) {\n\t\t\tconst i = j;\n\t\t\tconst unroll = current !== onDone && this.options.taps[i].type !== \"sync\";\n\t\t\tif (unroll) {\n\t\t\t\tcode += `function _next${i}() {\\n`;\n\t\t\t\tcode += current();\n\t\t\t\tcode += `}\\n`;\n\t\t\t\tcurrent = () => `${somethingReturns ? \"return \" : \"\"}_next${i}();\\n`;\n\t\t\t}\n\t\t\tconst done = current;\n\t\t\tconst doneBreak = skipDone => {\n\t\t\t\tif (skipDone) return \"\";\n\t\t\t\treturn onDone();\n\t\t\t};\n\t\t\tconst content = this.callTap(i, {\n\t\t\t\tonError: error => onError(i, error, done, doneBreak),\n\t\t\t\tonResult:\n\t\t\t\t\tonResult &&\n\t\t\t\t\t(result => {\n\t\t\t\t\t\treturn onResult(i, result, done, doneBreak);\n\t\t\t\t\t}),\n\t\t\t\tonDone: !onResult && done,\n\t\t\t\trethrowIfPossible:\n\t\t\t\t\trethrowIfPossible && (firstAsync < 0 || i < firstAsync)\n\t\t\t});\n\t\t\tcurrent = () => content;\n\t\t}\n\t\tcode += current();\n\t\treturn code;\n\t}\n\n\tcallTapsLooping({ onError, onDone, rethrowIfPossible }) {\n\t\tif (this.options.taps.length === 0) return onDone();\n\t\tconst syncOnly = this.options.taps.every(t => t.type === \"sync\");\n\t\tlet code = \"\";\n\t\tif (!syncOnly) {\n\t\t\tcode += \"var _looper = () => {\\n\";\n\t\t\tcode += \"var _loopAsync = false;\\n\";\n\t\t}\n\t\tcode += \"var _loop;\\n\";\n\t\tcode += \"do {\\n\";\n\t\tcode += \"_loop = false;\\n\";\n\t\tfor (let i = 0; i < this.options.interceptors.length; i++) {\n\t\t\tconst interceptor = this.options.interceptors[i];\n\t\t\tif (interceptor.loop) {\n\t\t\t\tcode += `${this.getInterceptor(i)}.loop(${this.args({\n\t\t\t\t\tbefore: interceptor.context ? \"_context\" : undefined\n\t\t\t\t})});\\n`;\n\t\t\t}\n\t\t}\n\t\tcode += this.callTapsSeries({\n\t\t\tonError,\n\t\t\tonResult: (i, result, next, doneBreak) => {\n\t\t\t\tlet code = \"\";\n\t\t\t\tcode += `if(${result} !== undefined) {\\n`;\n\t\t\t\tcode += \"_loop = true;\\n\";\n\t\t\t\tif (!syncOnly) code += \"if(_loopAsync) _looper();\\n\";\n\t\t\t\tcode += doneBreak(true);\n\t\t\t\tcode += `} else {\\n`;\n\t\t\t\tcode += next();\n\t\t\t\tcode += `}\\n`;\n\t\t\t\treturn code;\n\t\t\t},\n\t\t\tonDone:\n\t\t\t\tonDone &&\n\t\t\t\t(() => {\n\t\t\t\t\tlet code = \"\";\n\t\t\t\t\tcode += \"if(!_loop) {\\n\";\n\t\t\t\t\tcode += onDone();\n\t\t\t\t\tcode += \"}\\n\";\n\t\t\t\t\treturn code;\n\t\t\t\t}),\n\t\t\trethrowIfPossible: rethrowIfPossible && syncOnly\n\t\t});\n\t\tcode += \"} while(_loop);\\n\";\n\t\tif (!syncOnly) {\n\t\t\tcode += \"_loopAsync = true;\\n\";\n\t\t\tcode += \"};\\n\";\n\t\t\tcode += \"_looper();\\n\";\n\t\t}\n\t\treturn code;\n\t}\n\n\tcallTapsParallel({\n\t\tonError,\n\t\tonResult,\n\t\tonDone,\n\t\trethrowIfPossible,\n\t\tonTap = (i, run) => run()\n\t}) {\n\t\tif (this.options.taps.length <= 1) {\n\t\t\treturn this.callTapsSeries({\n\t\t\t\tonError,\n\t\t\t\tonResult,\n\t\t\t\tonDone,\n\t\t\t\trethrowIfPossible\n\t\t\t});\n\t\t}\n\t\tlet code = \"\";\n\t\tcode += \"do {\\n\";\n\t\tcode += `var _counter = ${this.options.taps.length};\\n`;\n\t\tif (onDone) {\n\t\t\tcode += \"var _done = () => {\\n\";\n\t\t\tcode += onDone();\n\t\t\tcode += \"};\\n\";\n\t\t}\n\t\tfor (let i = 0; i < this.options.taps.length; i++) {\n\t\t\tconst done = () => {\n\t\t\t\tif (onDone) return \"if(--_counter === 0) _done();\\n\";\n\t\t\t\telse return \"--_counter;\";\n\t\t\t};\n\t\t\tconst doneBreak = skipDone => {\n\t\t\t\tif (skipDone || !onDone) return \"_counter = 0;\\n\";\n\t\t\t\telse return \"_counter = 0;\\n_done();\\n\";\n\t\t\t};\n\t\t\tcode += \"if(_counter <= 0) break;\\n\";\n\t\t\tcode += onTap(\n\t\t\t\ti,\n\t\t\t\t() =>\n\t\t\t\t\tthis.callTap(i, {\n\t\t\t\t\t\tonError: error => {\n\t\t\t\t\t\t\tlet code = \"\";\n\t\t\t\t\t\t\tcode += \"if(_counter > 0) {\\n\";\n\t\t\t\t\t\t\tcode += onError(i, error, done, doneBreak);\n\t\t\t\t\t\t\tcode += \"}\\n\";\n\t\t\t\t\t\t\treturn code;\n\t\t\t\t\t\t},\n\t\t\t\t\t\tonResult:\n\t\t\t\t\t\t\tonResult &&\n\t\t\t\t\t\t\t(result => {\n\t\t\t\t\t\t\t\tlet code = \"\";\n\t\t\t\t\t\t\t\tcode += \"if(_counter > 0) {\\n\";\n\t\t\t\t\t\t\t\tcode += onResult(i, result, done, doneBreak);\n\t\t\t\t\t\t\t\tcode += \"}\\n\";\n\t\t\t\t\t\t\t\treturn code;\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\tonDone:\n\t\t\t\t\t\t\t!onResult &&\n\t\t\t\t\t\t\t(() => {\n\t\t\t\t\t\t\t\treturn done();\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\trethrowIfPossible\n\t\t\t\t\t}),\n\t\t\t\tdone,\n\t\t\t\tdoneBreak\n\t\t\t);\n\t\t}\n\t\tcode += \"} while(false);\\n\";\n\t\treturn code;\n\t}\n\n\targs({ before, after } = {}) {\n\t\tlet allArgs = this._args;\n\t\tif (before) allArgs = [before].concat(allArgs);\n\t\tif (after) allArgs = allArgs.concat(after);\n\t\tif (allArgs.length === 0) {\n\t\t\treturn \"\";\n\t\t} else {\n\t\t\treturn allArgs.join(\", \");\n\t\t}\n\t}\n\n\tgetTapFn(idx) {\n\t\treturn `_x[${idx}]`;\n\t}\n\n\tgetTap(idx) {\n\t\treturn `_taps[${idx}]`;\n\t}\n\n\tgetInterceptor(idx) {\n\t\treturn `_interceptors[${idx}]`;\n\t}\n}\n\nmodule.exports = HookCodeFactory;\n","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\nconst Hook = require(\"./Hook\");\nconst HookCodeFactory = require(\"./HookCodeFactory\");\n\nclass SyncHookCodeFactory extends HookCodeFactory {\n\tcontent({ onError, onDone, rethrowIfPossible }) {\n\t\treturn this.callTapsSeries({\n\t\t\tonError: (i, err) => onError(err),\n\t\t\tonDone,\n\t\t\trethrowIfPossible\n\t\t});\n\t}\n}\n\nconst factory = new SyncHookCodeFactory();\n\nclass SyncHook extends Hook {\n\ttapAsync() {\n\t\tthrow new Error(\"tapAsync is not supported on a SyncHook\");\n\t}\n\n\ttapPromise() {\n\t\tthrow new Error(\"tapPromise is not supported on a SyncHook\");\n\t}\n\n\tcompile(options) {\n\t\tfactory.setup(this, options);\n\t\treturn factory.create(options);\n\t}\n}\n\nmodule.exports = SyncHook;\n","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\nconst Hook = require(\"./Hook\");\nconst HookCodeFactory = require(\"./HookCodeFactory\");\n\nclass SyncWaterfallHookCodeFactory extends HookCodeFactory {\n\tcontent({ onError, onResult, resultReturns, rethrowIfPossible }) {\n\t\treturn this.callTapsSeries({\n\t\t\tonError: (i, err) => onError(err),\n\t\t\tonResult: (i, result, next) => {\n\t\t\t\tlet code = \"\";\n\t\t\t\tcode += `if(${result} !== undefined) {\\n`;\n\t\t\t\tcode += `${this._args[0]} = ${result};\\n`;\n\t\t\t\tcode += `}\\n`;\n\t\t\t\tcode += next();\n\t\t\t\treturn code;\n\t\t\t},\n\t\t\tonDone: () => onResult(this._args[0]),\n\t\t\tdoneReturns: resultReturns,\n\t\t\trethrowIfPossible\n\t\t});\n\t}\n}\n\nconst factory = new SyncWaterfallHookCodeFactory();\n\nclass SyncWaterfallHook extends Hook {\n\tconstructor(args) {\n\t\tsuper(args);\n\t\tif (args.length < 1)\n\t\t\tthrow new Error(\"Waterfall hooks must have at least one argument\");\n\t}\n\n\ttapAsync() {\n\t\tthrow new Error(\"tapAsync is not supported on a SyncWaterfallHook\");\n\t}\n\n\ttapPromise() {\n\t\tthrow new Error(\"tapPromise is not supported on a SyncWaterfallHook\");\n\t}\n\n\tcompile(options) {\n\t\tfactory.setup(this, options);\n\t\treturn factory.create(options);\n\t}\n}\n\nmodule.exports = SyncWaterfallHook;\n","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\nconst Hook = require(\"./Hook\");\nconst HookCodeFactory = require(\"./HookCodeFactory\");\n\nclass SyncLoopHookCodeFactory extends HookCodeFactory {\n\tcontent({ onError, onDone, rethrowIfPossible }) {\n\t\treturn this.callTapsLooping({\n\t\t\tonError: (i, err) => onError(err),\n\t\t\tonDone,\n\t\t\trethrowIfPossible\n\t\t});\n\t}\n}\n\nconst factory = new SyncLoopHookCodeFactory();\n\nclass SyncLoopHook extends Hook {\n\ttapAsync() {\n\t\tthrow new Error(\"tapAsync is not supported on a SyncLoopHook\");\n\t}\n\n\ttapPromise() {\n\t\tthrow new Error(\"tapPromise is not supported on a SyncLoopHook\");\n\t}\n\n\tcompile(options) {\n\t\tfactory.setup(this, options);\n\t\treturn factory.create(options);\n\t}\n}\n\nmodule.exports = SyncLoopHook;\n","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\nconst Hook = require(\"./Hook\");\nconst HookCodeFactory = require(\"./HookCodeFactory\");\n\nclass AsyncParallelHookCodeFactory extends HookCodeFactory {\n\tcontent({ onError, onDone }) {\n\t\treturn this.callTapsParallel({\n\t\t\tonError: (i, err, done, doneBreak) => onError(err) + doneBreak(true),\n\t\t\tonDone\n\t\t});\n\t}\n}\n\nconst factory = new AsyncParallelHookCodeFactory();\n\nclass AsyncParallelHook extends Hook {\n\tcompile(options) {\n\t\tfactory.setup(this, options);\n\t\treturn factory.create(options);\n\t}\n}\n\nObject.defineProperties(AsyncParallelHook.prototype, {\n\t_call: { value: undefined, configurable: true, writable: true }\n});\n\nmodule.exports = AsyncParallelHook;\n","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\nconst Hook = require(\"./Hook\");\nconst HookCodeFactory = require(\"./HookCodeFactory\");\n\nclass AsyncParallelBailHookCodeFactory extends HookCodeFactory {\n\tcontent({ onError, onResult, onDone }) {\n\t\tlet code = \"\";\n\t\tcode += `var _results = new Array(${this.options.taps.length});\\n`;\n\t\tcode += \"var _checkDone = () => {\\n\";\n\t\tcode += \"for(var i = 0; i < _results.length; i++) {\\n\";\n\t\tcode += \"var item = _results[i];\\n\";\n\t\tcode += \"if(item === undefined) return false;\\n\";\n\t\tcode += \"if(item.result !== undefined) {\\n\";\n\t\tcode += onResult(\"item.result\");\n\t\tcode += \"return true;\\n\";\n\t\tcode += \"}\\n\";\n\t\tcode += \"if(item.error) {\\n\";\n\t\tcode += onError(\"item.error\");\n\t\tcode += \"return true;\\n\";\n\t\tcode += \"}\\n\";\n\t\tcode += \"}\\n\";\n\t\tcode += \"return false;\\n\";\n\t\tcode += \"}\\n\";\n\t\tcode += this.callTapsParallel({\n\t\t\tonError: (i, err, done, doneBreak) => {\n\t\t\t\tlet code = \"\";\n\t\t\t\tcode += `if(${i} < _results.length && ((_results.length = ${i +\n\t\t\t\t\t1}), (_results[${i}] = { error: ${err} }), _checkDone())) {\\n`;\n\t\t\t\tcode += doneBreak(true);\n\t\t\t\tcode += \"} else {\\n\";\n\t\t\t\tcode += done();\n\t\t\t\tcode += \"}\\n\";\n\t\t\t\treturn code;\n\t\t\t},\n\t\t\tonResult: (i, result, done, doneBreak) => {\n\t\t\t\tlet code = \"\";\n\t\t\t\tcode += `if(${i} < _results.length && (${result} !== undefined && (_results.length = ${i +\n\t\t\t\t\t1}), (_results[${i}] = { result: ${result} }), _checkDone())) {\\n`;\n\t\t\t\tcode += doneBreak(true);\n\t\t\t\tcode += \"} else {\\n\";\n\t\t\t\tcode += done();\n\t\t\t\tcode += \"}\\n\";\n\t\t\t\treturn code;\n\t\t\t},\n\t\t\tonTap: (i, run, done, doneBreak) => {\n\t\t\t\tlet code = \"\";\n\t\t\t\tif (i > 0) {\n\t\t\t\t\tcode += `if(${i} >= _results.length) {\\n`;\n\t\t\t\t\tcode += done();\n\t\t\t\t\tcode += \"} else {\\n\";\n\t\t\t\t}\n\t\t\t\tcode += run();\n\t\t\t\tif (i > 0) code += \"}\\n\";\n\t\t\t\treturn code;\n\t\t\t},\n\t\t\tonDone\n\t\t});\n\t\treturn code;\n\t}\n}\n\nconst factory = new AsyncParallelBailHookCodeFactory();\n\nclass AsyncParallelBailHook extends Hook {\n\tcompile(options) {\n\t\tfactory.setup(this, options);\n\t\treturn factory.create(options);\n\t}\n}\n\nObject.defineProperties(AsyncParallelBailHook.prototype, {\n\t_call: { value: undefined, configurable: true, writable: true }\n});\n\nmodule.exports = AsyncParallelBailHook;\n","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\nconst Hook = require(\"./Hook\");\nconst HookCodeFactory = require(\"./HookCodeFactory\");\n\nclass AsyncSeriesHookCodeFactory extends HookCodeFactory {\n\tcontent({ onError, onDone }) {\n\t\treturn this.callTapsSeries({\n\t\t\tonError: (i, err, next, doneBreak) => onError(err) + doneBreak(true),\n\t\t\tonDone\n\t\t});\n\t}\n}\n\nconst factory = new AsyncSeriesHookCodeFactory();\n\nclass AsyncSeriesHook extends Hook {\n\tcompile(options) {\n\t\tfactory.setup(this, options);\n\t\treturn factory.create(options);\n\t}\n}\n\nObject.defineProperties(AsyncSeriesHook.prototype, {\n\t_call: { value: undefined, configurable: true, writable: true }\n});\n\nmodule.exports = AsyncSeriesHook;\n","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\nconst Hook = require(\"./Hook\");\nconst HookCodeFactory = require(\"./HookCodeFactory\");\n\nclass AsyncSeriesBailHookCodeFactory extends HookCodeFactory {\n\tcontent({ onError, onResult, resultReturns, onDone }) {\n\t\treturn this.callTapsSeries({\n\t\t\tonError: (i, err, next, doneBreak) => onError(err) + doneBreak(true),\n\t\t\tonResult: (i, result, next) =>\n\t\t\t\t`if(${result} !== undefined) {\\n${onResult(\n\t\t\t\t\tresult\n\t\t\t\t)};\\n} else {\\n${next()}}\\n`,\n\t\t\tresultReturns,\n\t\t\tonDone\n\t\t});\n\t}\n}\n\nconst factory = new AsyncSeriesBailHookCodeFactory();\n\nclass AsyncSeriesBailHook extends Hook {\n\tcompile(options) {\n\t\tfactory.setup(this, options);\n\t\treturn factory.create(options);\n\t}\n}\n\nObject.defineProperties(AsyncSeriesBailHook.prototype, {\n\t_call: { value: undefined, configurable: true, writable: true }\n});\n\nmodule.exports = AsyncSeriesBailHook;\n","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\nconst Hook = require(\"./Hook\");\nconst HookCodeFactory = require(\"./HookCodeFactory\");\n\nclass AsyncSeriesWaterfallHookCodeFactory extends HookCodeFactory {\n\tcontent({ onError, onResult, onDone }) {\n\t\treturn this.callTapsSeries({\n\t\t\tonError: (i, err, next, doneBreak) => onError(err) + doneBreak(true),\n\t\t\tonResult: (i, result, next) => {\n\t\t\t\tlet code = \"\";\n\t\t\t\tcode += `if(${result} !== undefined) {\\n`;\n\t\t\t\tcode += `${this._args[0]} = ${result};\\n`;\n\t\t\t\tcode += `}\\n`;\n\t\t\t\tcode += next();\n\t\t\t\treturn code;\n\t\t\t},\n\t\t\tonDone: () => onResult(this._args[0])\n\t\t});\n\t}\n}\n\nconst factory = new AsyncSeriesWaterfallHookCodeFactory();\n\nclass AsyncSeriesWaterfallHook extends Hook {\n\tconstructor(args) {\n\t\tsuper(args);\n\t\tif (args.length < 1)\n\t\t\tthrow new Error(\"Waterfall hooks must have at least one argument\");\n\t}\n\n\tcompile(options) {\n\t\tfactory.setup(this, options);\n\t\treturn factory.create(options);\n\t}\n}\n\nObject.defineProperties(AsyncSeriesWaterfallHook.prototype, {\n\t_call: { value: undefined, configurable: true, writable: true }\n});\n\nmodule.exports = AsyncSeriesWaterfallHook;\n","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\nclass HookMap {\n\tconstructor(factory) {\n\t\tthis._map = new Map();\n\t\tthis._factory = factory;\n\t\tthis._interceptors = [];\n\t}\n\n\tget(key) {\n\t\treturn this._map.get(key);\n\t}\n\n\tfor(key) {\n\t\tconst hook = this.get(key);\n\t\tif (hook !== undefined) {\n\t\t\treturn hook;\n\t\t}\n\t\tlet newHook = this._factory(key);\n\t\tconst interceptors = this._interceptors;\n\t\tfor (let i = 0; i < interceptors.length; i++) {\n\t\t\tnewHook = interceptors[i].factory(key, newHook);\n\t\t}\n\t\tthis._map.set(key, newHook);\n\t\treturn newHook;\n\t}\n\n\tintercept(interceptor) {\n\t\tthis._interceptors.push(\n\t\t\tObject.assign(\n\t\t\t\t{\n\t\t\t\t\tfactory: (key, hook) => hook\n\t\t\t\t},\n\t\t\t\tinterceptor\n\t\t\t)\n\t\t);\n\t}\n\n\ttap(key, options, fn) {\n\t\treturn this.for(key).tap(options, fn);\n\t}\n\n\ttapAsync(key, options, fn) {\n\t\treturn this.for(key).tapAsync(options, fn);\n\t}\n\n\ttapPromise(key, options, fn) {\n\t\treturn this.for(key).tapPromise(options, fn);\n\t}\n}\n\nmodule.exports = HookMap;\n","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\nconst Hook = require(\"./Hook\");\n\nclass MultiHook {\n\tconstructor(hooks) {\n\t\tthis.hooks = hooks;\n\t}\n\n\ttap(options, fn) {\n\t\tfor (const hook of this.hooks) {\n\t\t\thook.tap(options, fn);\n\t\t}\n\t}\n\n\ttapAsync(options, fn) {\n\t\tfor (const hook of this.hooks) {\n\t\t\thook.tapAsync(options, fn);\n\t\t}\n\t}\n\n\ttapPromise(options, fn) {\n\t\tfor (const hook of this.hooks) {\n\t\t\thook.tapPromise(options, fn);\n\t\t}\n\t}\n\n\tisUsed() {\n\t\tfor (const hook of this.hooks) {\n\t\t\tif (hook.isUsed()) return true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tintercept(interceptor) {\n\t\tfor (const hook of this.hooks) {\n\t\t\thook.intercept(interceptor);\n\t\t}\n\t}\n\n\twithOptions(options) {\n\t\treturn new MultiHook(this.hooks.map(h => h.withOptions(options)));\n\t}\n}\n\nmodule.exports = MultiHook;\n"]}